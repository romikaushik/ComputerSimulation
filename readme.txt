Project Overview

This project presents a simulation of a simplified two-dimensional solar system, incorporating multiple celestial bodies governed by Newtonian gravitational dynamics. The model includes functionality to numerically integrate the equations of motion using three standard techniques—Euler-Cromer, Direct Euler, and Beeman’s method—and visualizes the orbital paths and energy conservation characteristics associated with each.

Additionally, the simulation incorporates an experimental module which analyses the trajectory of a satellite launched from Earth’s orbit toward Mars. By systematically varying the satellite’s initial launch velocity and angle, the simulation identifies configurations that result in minimal approach distances to Mars, serving as a basic trajectory optimization study.

⸻

Contents of Submission

	•	main.py
	
Contains all implementation code, including class definitions (CelestialBody, Satellite, SolarSystem), numerical integration logic, plotting and animation routines, as well as the experimental search for satellite transfer trajectories.

	•	input.json
	
A structured JSON file containing predefined data for each celestial body in the system. This includes mass, radius, orbital radius, orbital period, visual attributes, and patch radius for rendering.

	•	BEEMAN.csv, EULER-CROMER.csv, DIRECT-EULER.csv
	
These CSV files are automatically generated by the simulation. Each file logs the total energy of the system over time for the corresponding numerical integration method. They are used for evaluating the stability and accuracy of each technique.

	•	readme.txt
	
This document. Provides an overview of the simulation, instructions for running the code, and a description of included files.

⸻

Execution Instructions

Requirements

To run the code, the following Python packages must be installed:

	•	numpy
	•	matplotlib

Install them using:

pip install numpy matplotlib

Running the Default Simulation

To execute the default planetary simulation as outlined in Section 3 of the assignment:

	1.	Ensure input.json and main.py are in the same directory.

	2.	From a terminal or command prompt, run:

python main.py

	3.	When prompted, enter the total duration of the simulation (in years) and the desired timestep (in days).

	4.	The simulation will proceed using three different integration methods:

	•	Euler-Cromer
	•	Direct Euler
	•	Beeman

	5.	For each method, the programme will:

	•	Simulate planetary motion over the specified duration.
	•	Save the total system energy at each time step to a corresponding CSV file.
	•	Generate plots of orbital paths and energy conservation.
	•	Display a 3D animation of the orbital motion.

	6.	Upon completion, the programme will print out the simulated orbital period of each planet and the percentage error relative to their actual orbital period as given in the input data.

Running the Satellite Experiment

Following the default simulation, the programme executes an automated experiment to determine optimal satellite launch parameters for a close approach to Mars.

The satellite is launched from Earth orbit with varying speeds (in the range of 28,000 m/s to 34,000 m/s) and launch angles (from -10° to +10°). For each configuration, the simulation:

	•	Records the satellite’s trajectory.
	•	Calculates the minimum distance to Mars.
	•	Outputs the time of closest approach.

The combination of speed and angle that results in the closest encounter is reported at the end of the experiment.

⸻

Additional Notes

	•	The simulation assumes motion in a two-dimensional plane for simplification; effects such as inclination and eccentricity are not modeled.
	•	All units are in the SI system: meters (m), kilograms (kg), seconds (s).
	•	The satellite is modeled as a mass of 500 kg and does not affect the dynamics of other bodies due to its negligible mass relative to the planets.
	•	Energy conservation is used as a proxy for assessing the numerical stability of integration schemes.

⸻

For any clarifications or questions related to this simulation, please contact the author at the university-provided email address.
